-- Problem 2: Even Fibonacci numbers
-- https://projecteuler.net/problem=2
-- Each new term in the Fibonacci sequence is generated by adding the
-- previous two terms. By starting with 1 and 2, the first 10 terms will
-- be:
--
-- 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
--
-- By considering the terms in the Fibonacci sequence whose values do
-- not exceed four million, find the sum of the even-valued terms.

import System.Environment

main :: IO ()
main = print ( sumEvenFib' 4000000 )

sumEvenFib :: Integer -> Integer
sumEvenFib x = sum [ y | y <- fibList x , even y ]

fibList :: Integer -> [Integer]
fibList x = [ y | i <- [1..] , let y = fibNum i, y <= x ]

fibNum :: Integer -> Integer
fibNum 1 = 1
fibNum 2 = 2
fibNum n = fibNum (n-1) + fibNum (n-2)

sumEvenFib' :: Integer -> Integer
sumEvenFib' x = sum [ y | y <- takeWhile (<= x) fibs, even y ]

fibs = 1 : 2 : zipWith (+) fibs (tail fibs)

